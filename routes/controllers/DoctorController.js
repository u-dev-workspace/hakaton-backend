const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { Doctor, Recipe, Reception, User, Appointment, UsingEvent} = require("../../models/models");
const moment = require("moment-timezone");
require('dotenv').config();

exports.login = async (req, res) => {
    const { phone, password } = req.body;
    const doctor = await Doctor.findOne({ phone });
    if (!doctor || !bcrypt.compareSync(password, doctor.password)) {
        return res.status(401).json({ message: 'Invalid credentials' });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign({ id: doctor._id, role: "doctor" }, process.env.JWT_SECRET, {
        expiresIn: "1d",
    });

    res.cookie("token", token, {
        httpOnly: true,
        secure: false, // –í–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        sameSite: "lax", // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å CORS
        path: "/",
    });

    res.status(200).json({ message: "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥", token });

};

exports.getPatientsByDoctor = async (req, res) => {
    try {
        const doctorId = req.user.id; // ID –≤—Ä–∞—á–∞ –∏–∑ —Ç–æ–∫–µ–Ω–∞

        // –ù–∞—Ö–æ–¥–∏–º –≤—Ä–∞—á–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
        const doctor = await Doctor.findById(doctorId).populate("users", "fname phone iin");

        if (!doctor) {
            return res.status(404).json({ message: "Doctor not found" });
        }

        if (!doctor.users || doctor.users.length === 0) {
            return res.status(404).json({ message: "No patients found for this doctor." });
        }

        res.status(200).json(doctor.users);
    } catch (error) {
        console.error("Error fetching patients by doctor:", error);
        res.status(500).json({ message: "Internal server error" });
    }
};
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ 12-—á–∞—Å–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ 24-—á–∞—Å–æ–≤–æ–π (09:00, 14:00, 21:00)
const convertTo24HourFormat = (timeStr) => {
    return moment(timeStr, ["hA", "ha", "hhA", "h:mA", "h:ma", "hh:mA", "hh:ma"]).format("HH:mm");
};

exports.createRecipe = async (req, res) => {
    try {
        const { user, receptions, disease, diseaseDescription, tryComment } = req.body;
        const doctorId = req.user.id;

        const existingUser = await User.findById(user);
        if (!existingUser) {
            return res.status(404).json({ message: "User not found" });
        }

        const existingDoctor = await Doctor.findById(doctorId);
        if (!existingDoctor) {
            return res.status(404).json({ message: "Doctor not found" });
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–µ–º–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
        const timeMapping = {
            morning: convertTo24HourFormat(existingUser.medicationTimes?.morning || "08:00"),
            afternoon: convertTo24HourFormat(existingUser.medicationTimes?.afternoon || "13:00"),
            evening: convertTo24HourFormat(existingUser.medicationTimes?.evening || "19:00")
        };

        let createdReceptions = [];
        let createdUsingEvents = [];

        for (const receptionData of receptions) {
            const { drug, day, timesPerDay, usingDescription } = receptionData;

            console.log(receptionData)
            if (timesPerDay < 1 || timesPerDay > 3) {
                return res.status(400).json({ message: "Invalid timesPerDay value. Must be between 1 and 3." });
            }

            const newReception = new Reception({
                drug,
                day,
                timesPerDay,
                usingDescription,
                user: existingUser._id,
                doctor: existingDoctor._id,
                startDay: moment().tz("Asia/Almaty").format("YYYY-MM-DD")
            });

            await newReception.save();
            createdReceptions.push(newReception._id);

            // –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            const selectedTimes = Object.keys(timeMapping).slice(0, timesPerDay);

            for (let i = 0; i < day; i++) {
                for (const period of selectedTimes) {
                    const time = timeMapping[period];

                    if (!time || typeof time !== "string" || !time.includes(":")) {
                        return res.status(400).json({ message: `Invalid time format for ${period}: ${time}` });
                    }

                    const [hour, minute] = time.split(":").map(num => parseInt(num, 10));
                    if (isNaN(hour) || isNaN(minute)) {
                        return res.status(400).json({ message: `Invalid time values for ${period}: ${time}` });
                    }

                    let eventDateTime = moment()
                        .tz("Asia/Almaty")
                        .add(i, "days")
                        .set({ hour, minute, second: 0, millisecond: 0 });

                    if (!eventDateTime.isValid()) {
                        return res.status(400).json({ message: `Generated invalid date for ${period}` });
                    }

                    const newUsingEvent = new UsingEvent({
                        reception: newReception._id,
                        user: existingUser._id,
                        doctor: existingDoctor._id,
                        dateTime: eventDateTime.toISOString(), // ISO —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
                        timeOfDay: period,
                        missedCount: 0,
                        isCompleted: false,
                        isExpired: false
                    });

                    await newUsingEvent.save();
                    createdUsingEvents.push(newUsingEvent._id);
                }
            }
        }

        const recipe = new Recipe({
            doctor: doctorId,
            user: existingUser._id,
            reception: createdReceptions,
            disease,
            diseaseDescription,
            tryComment
        });

        await recipe.save();

        existingUser.recipe.push(recipe._id);
        existingDoctor.recipe.push(recipe._id);

        if (!existingUser.doctor.includes(doctorId)) {
            existingUser.doctor.push(doctorId);
        }

        if (!existingDoctor.users.includes(existingUser._id)) {
            existingDoctor.users.push(existingUser._id);
        }

        await existingUser.save();
        await existingDoctor.save();

        res.status(201).json({
            message: "Recipe created successfully",
            recipe,
            createdReceptions,
            createdUsingEvents
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "Internal server error" });
    }
};





exports.getUpcomingAppointments = async (req, res) => {
    try {
        const doctorId = req.user.id;
        const currentDate = moment().tz("Asia/Almaty").toDate(); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Date

        const appointments = await Appointment.find({
            doctor: doctorId
        })
            .populate('user', 'fname phone')
            .sort({ dateTime: 1 }); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)

        // üîπ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç
        const formattedAppointments = appointments.map(appointment => ({
            ...appointment._doc, // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            formattedDateTime: moment(appointment.dateTime)
                .tz("Asia/Almaty")
                .format("DD MMMM YYYY, HH:mm") // –ù–∞–ø—Ä–∏–º–µ—Ä: "21 –º–∞—Ä—Ç–∞ 2025, 18:08"
        }));

        res.status(200).json({ appointments: formattedAppointments });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:", error);
        res.status(500).json({ message: "Internal server error" });
    }
};
exports.getDoctorProfile = async (req, res) => {
    try {
        // üîπ –ü–æ–ª—É—á–∞–µ–º `doctorId` –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞)
        const doctorId = req.user.id;

        // üîπ –ù–∞—Ö–æ–¥–∏–º –≤—Ä–∞—á–∞ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ —Å–≤—è–∑–∏
        const doctor = await Doctor.findById(doctorId)
            .populate("users", "fname lname phone iin") // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤—Ä–∞—á–∞
            .populate("hospital", "name address") // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å–Ω–∏—Ü—É
            .populate("recipe"); // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –≤—Ä–∞—á–∞

        if (!doctor) {
            return res.status(404).json({ message: "Doctor not found" });
        }

        // üîπ –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º –∫ –≤—Ä–∞—á—É
        const appointments = await Appointment.find({ doctor: doctorId })
            .populate("user", "fname lname phone") // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            .sort({ dateTimeISO: 1 }); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ

        // üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const doctorProfile = {
            _id: doctor._id,
            fname: doctor.fname,
            lname: doctor.lname,
            phone: doctor.phone,
            speciality: doctor.speciality,
            hospital: doctor.hospital || null,
            users: doctor.users || [],
            appointments: appointments || [],
            recipes: doctor.recipe || [],
        };

        res.status(200).json(doctorProfile);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–∞—á–µ:", error);
        res.status(500).json({ message: "Internal server error" });
    }
};

const calculateScore = async (userId) => {
    const events = await UsingEvent.find({ user: userId });
    const recipes = await Recipe.find({ user: userId });

    const totalEvents = events.length;
    const missedEvents = events.filter(e => e.missedCount > 0).length;
    const activeRecipes = recipes.filter(r => r.reception.length > 0).length;
    const completedRecipes = recipes.length - activeRecipes;

    if (totalEvents === 0) return 0; // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–µ–º–æ–≤, —Ä–µ–π—Ç–∏–Ω–≥ 0

    // –§–æ—Ä–º—É–ª–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (—á–µ–º –º–µ–Ω—å—à–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤, —Ç–µ–º –≤—ã—à–µ —Ä–µ–π—Ç–∏–Ω–≥)
    let score = 10 - (missedEvents / totalEvents) * 10;
    score += (activeRecipes * 1) - (completedRecipes * 0.5);
    return Math.max(0, Math.min(10, score)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-10
};

exports.getDoctorAnalitics = async (req, res) => {
    try {
        const doctorId = req.user.id;
        const doctor = await Doctor.findById(doctorId).populate('users');
        if (!doctor) return res.status(404).json({ error: '–î–æ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });

        const statistics = await Promise.all(doctor.users.map(async (user) => {
            const score = await calculateScore(user._id);
            return { userId: user._id, name: user.fname, score };
        }));

        res.json(statistics);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

exports.getDoctorData = async (req, res) => {
    try {
        const doctorId = req.user.id;
        const doctor = await Doctor.findById(doctorId).populate('users hospitals recipe');
        if (!doctor) return res.status(404).json({ error: '–î–æ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });

        res.json({
            doctorId: doctor._id,
            name: doctor.fname,
            phone: doctor.phone,
            speciality: doctor.speciality,
            hospitals: doctor.hospitals.map(hospital => ({ id: hospital._id, name: hospital.name })),
            patients: doctor.users.map(user => ({ id: user._id, name: user.fname })),
            recipes: doctor.recipe.map(recipe => ({ id: recipe._id, disease: recipe.disease }))
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// 2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤—Ä–∞—á–∞—Ö, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ

