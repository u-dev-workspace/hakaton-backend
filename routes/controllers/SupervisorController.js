const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { Doctor, Supervisor, User, Appointment, Hospital} = require("../../models/models");
const moment = require("moment-timezone");
require('dotenv').config();


exports.login = async (req, res) => {
    const { name, password } = req.body;
    const supervisor = await Supervisor.findOne({ name });

    if (!supervisor || !bcrypt.compareSync(password, supervisor.password)) {
        return res.status(401).json({ message: 'Invalid credentials' });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign({ id: supervisor._id, role: 'supervisor' }, process.env.JWT_SECRET, { expiresIn: '1d' });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∏ (httpOnly, Secure - –¥–ª—è HTTPS)
    res.cookie('token', token, {
        httpOnly: true, // –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä—É (JavaScript –Ω–µ –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å)
        secure: process.env.NODE_ENV === 'production', // –í–∫–ª—é—á–∞–µ–º secure –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        sameSite: 'lax', // –£–ª—É—á—à–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        maxAge: 24 * 60 * 60 * 1000 // 1 –¥–µ–Ω—å
    });

    res.json({ message: 'Login successful', token });
};

exports.getSupervisorData = async (req, res) => {
    try {
        const supervisorId = req.user.id;

        const supervisor = await Supervisor.findById(supervisorId).populate('hospital');

        if (!supervisor) {
            return res.status(404).json({ message: "Supervisor not found" });
        }

        res.status(200).json(supervisor);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "Internal server error" });
    }
};

exports.createUser = async (req, res) => {
    const { fname, phone, password, iin } = req.body;
    const hashedPassword = bcrypt.hashSync(password || '0000' , 10);
    const user = new User({ fname, phone, password: hashedPassword, iin });
    await user.save();
    res.status(201).json({ message: 'User created' });
};

exports.createDoctor = async (req, res) => {
    const { fname, phone, password, speciality } = req.body;
    const hashedPassword = bcrypt.hashSync(password, 10);
    const doctor = new Doctor({ fname, phone, password: hashedPassword, speciality });
    await doctor.save();
    res.status(201).json({ message: 'Doctor created' });
};

exports.createSupervisor = async (req, res) => {
    try {
        const { name, password, hospitalId } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–æ–ª—å–Ω–∏—Ü–∞
        const hospital = await Hospital.findById(hospitalId);
        if (!hospital) {
            return res.status(404).json({ message: "Hospital not found" });
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = bcrypt.hashSync(password, 10);

        // –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –±–æ–ª—å–Ω–∏—Ü–µ
        const supervisor = new Supervisor({ name, password: hashedPassword, hospital: hospitalId });
        await supervisor.save();

        res.status(201).json({ message: "Supervisor created successfully", supervisor });
    } catch (error) {
        console.error("Error creating supervisor:", error);
        res.status(500).json({ message: "Internal server error" });
    }
};

exports.createHospital = async (req, res) => {
    const { name, address, gisLink } = req.body;

    const hospital = new Hospital({ name, address, gisLink });
    await hospital.save();
    res.status(201).json({ message: 'hospital created' });
};

exports.assignDoctorToHospital = async (req, res) => {
    try {
        const { userId, hospitalId } = req.body;

        const hospital = await Hospital.findById(hospitalId);
        if (!hospital) {
            return res.status(404).json({ message: "Hospital not found" });
        }

        const doctor = await Doctor.findById(userId);
        if (!doctor) {
            return res.status(404).json({ message: "Doctor not found" });
        }

        doctor.hospital = hospitalId;
        hospital.doctors.push(userId);

        await doctor.save();
        await hospital.save();

        res.status(200).json({ message: "Doctor assigned to hospital successfully" });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "Internal server error" });
    }
};

// 2Ô∏è‚É£ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∫ –±–æ–ª—å–Ω–∏—Ü–µ
exports.assignPatientToHospital = async (req, res) => {
    try {
        const { userId, hospitalId } = req.body;

        // –ù–∞–π—Ç–∏ –±–æ–ª—å–Ω–∏—Ü—É
        const hospital = await Hospital.findById(hospitalId);
        if (!hospital) {
            return res.status(404).json({ message: "Hospital not found" });
        }

        // –ù–∞–π—Ç–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        const patient = await User.findById(userId);
        if (!patient) {
            return res.status(404).json({ message: "Patient not found" });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –ø–∞—Ü–∏–µ–Ω—Ç –≤ –±–æ–ª—å–Ω–∏—Ü—É
        if (!hospital.patients.includes(userId)) {
            hospital.patients.push(userId);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –±–æ–ª—å–Ω–∏—Ü–∞ —É –ø–∞—Ü–∏–µ–Ω—Ç–∞
        if (!Array.isArray(patient.hospitals)) {
            patient.hospitals = [];
        }
        if (!patient.hospitals.includes(hospitalId)) {
            patient.hospitals.push(hospitalId);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await patient.save();
        await hospital.save();

        res.status(200).json({ message: "Patient assigned to hospital successfully" });
    } catch (error) {
        console.error("Error assigning patient to hospital:", error);
        res.status(500).json({ message: "Internal server error" });
    }
};



exports.createAppointment = async (req, res) => {
    try {
        const { doctorId, userId, dateTime } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ä–∞—á–∞
        const doctor = await Doctor.findById(doctorId);
        if (!doctor) {
            return res.status(404).json({ message: "Doctor not found" });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }

        // üîπ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∫ –≤—Ä–∞—á—É (–µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç)
        if (!doctor.users.includes(userId)) {
            doctor.users.push(userId);
        }

        // üîπ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—Ä–∞—á–∞ –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É (–µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç)
        if (!user.doctor.includes(doctorId)) {
            user.doctor.push(doctorId);
        }

        // üîπ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const dateTimeISO = moment(dateTime, ["YYYY-MM-DD HH:mm", moment.ISO_8601], true).toDate();
        const dateTimeFormatted = moment(dateTimeISO).tz("Asia/Almaty").format("DD MMMM HH:mm");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        if (!moment(dateTimeISO).isValid()) {
            return res.status(400).json({ message: "Invalid date format" });
        }

        // üîπ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º
        const appointment = new Appointment({
            doctor: doctorId,
            user: userId,
            dateTimeISO,
            dateTimeFormatted
        });

        // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
        await user.save();
        await doctor.save();
        await appointment.save();

        res.status(201).json({ message: "Appointment created successfully", appointment });
    } catch (error) {
        console.error("Error creating appointment:", error);
        res.status(500).json({ message: "Internal server error" });
    }
};

exports.getAppointmentsByHospital = async (req, res) => {
    try {
        const { hospitalId } = req.params;

        // –ù–∞—Ö–æ–¥–∏–º –±–æ–ª—å–Ω–∏—Ü—É –∏ –µ—ë –≤—Ä–∞—á–µ–π
        const hospital = await Hospital.findById(hospitalId).populate("doctors", "_id");
        if (!hospital) {
            return res.status(404).json({ message: "Hospital not found" });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ä–∞—á–µ–π —ç—Ç–æ–π –±–æ–ª—å–Ω–∏—Ü—ã
        const doctorIds = hospital.doctors.map(doc => doc._id);
        const appointments = await Appointment.find({ doctor: { $in: doctorIds } })
            .populate("user", "fname phone") // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            .populate("doctor", "fname speciality") // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞
            .sort({ dateTime: 1 }); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ

        if (!appointments.length) {
            return res.status(404).json({ message: "No appointments found for this hospital." });
        }

        res.status(200).json(appointments);
    } catch (error) {
        console.error("Error fetching appointments by hospital:", error);
        res.status(500).json({ message: "Internal server error" });
    }
};
